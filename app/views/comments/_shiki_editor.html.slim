- preview_url = defined?(comment) && comment.kind_of?(Message) ? \
    preview_messages_url : preview_comments_url

- item_type = defined?(comment) && comment.kind_of?(Message) ? \
    'message' : 'comment'

- if defined?(f)
  - if comment.new_record?
    aside.markers
      - if comment.try :allowed_summary?
        .b-summary_marker.active[
          class="#{:off unless comment.summary?}"
          data-text="#{t 'markers.summary'}"
        ]
      - if comment.respond_to? :offtopic?
        .b-offtopic_marker.active[
          class="#{:off unless comment.offtopic?}"
          data-text="#{t 'markers.offtopic'}"
        ]

aside.buttons
  .editor-controls
    span.editor-bold.b-tooltipped.unprocessed[
      title="#{t '.bold'}"
      data-direction="top"
    ]
    span.editor-italic.b-tooltipped.unprocessed[
      title="#{t '.italic'}"
      data-direction="top"
    ]
    span.editor-underline.b-tooltipped.unprocessed[
      title="#{t '.underline'}"
      data-direction="top"
    ]
    span.editor-strike.b-tooltipped.unprocessed[
      title="#{t '.striked'}"
      data-direction="top"
    ]

    span.editor-link.b-tooltipped.unprocessed[
      title="#{t '.link'}"
      data-direction="top"
    ]
    span.editor-image.b-tooltipped.unprocessed[
      title="#{t '.image_link'}"
      data-direction="top"
    ]
    span.editor-quote.b-tooltipped.unprocessed[
      title="#{t '.quote'}"
      data-direction="top"
    ]
    span.editor-spoiler.b-tooltipped.unprocessed[
      title="#{t '.spoiler'}"
      data-direction="top"
    ]

    span.editor-file.b-tooltipped.unprocessed[
        title="#{t '.upload_image'}"
        data-direction="top"
      ]
      span
        input type="file"
    span.editor-upload
    span.editor-smiley.b-tooltipped.unprocessed[
      title="#{t '.smiley'}"
      data-direction="top"
    ]

.smileys.hidden-block data-href="#{smileys_comments_url subdomain: false}"
  .ajax-loading title="#{t 'loading'}"

.links.hidden-block
  p
    = label_tag :link_type_url do
      = radio_button_tag 'link_type', :url, false,
        'data-placeholder' => t('.enter.page_url')
      span ссылка

    = label_tag :link_type_anime do
      = radio_button_tag 'link_type', :anime, false,
        'data-placeholder' => t('.enter.anime_title'),
        'data-autocomplete' => autocomplete_animes_url
      span аниме

    = label_tag :link_type_manga do
      = radio_button_tag 'link_type', :manga, false,
        'data-placeholder' => t('.enter.manga_title'),
        'data-autocomplete' => autocomplete_mangas_url
      span манга

    = label_tag :link_type_character do
      = radio_button_tag 'link_type', :character, false,
        'data-placeholder' => t('.enter.character_name'),
        'data-autocomplete' => autocomplete_characters_url
      span персонаж

    = label_tag :link_type_person do
      = radio_button_tag 'link_type', :person, false,
        'data-placeholder' => t('.enter.person_name'),
        'data-autocomplete' => autocomplete_people_url
      span человек

    = text_field_tag 'link_value', '', class: 'link-value ac_input'

    span.button.ok data-type='links' OK

.images.hidden-block
  p
    = label_tag :image_value do
      = t '.insert_image'
    = text_field_tag 'image_value', '',
      class: 'link-value',
      placeholder: t('.enter.image_url')

    span.button.ok data-type='images' OK

.quotes.hidden-block
  p
    = label_tag :image_value do
      = t '.quote_user'
    = text_field_tag 'quote_value', '',
      class: 'link-value ac_input',
      placeholder: t('.enter.user_name'),
      'data-autocomplete' => autocomplete_users_url

    span.button.ok data-type='quotes' OK

= render 'blocks/upload_progress'

.body
  .editor
    - if defined? f
      - if f.object.kind_of? Comment
        - if f.object.persisted?
          = f.input :user_id, as: :hidden
        = f.input :commentable_id, as: :hidden
        = f.input :commentable_type, as: :hidden
        = f.input :is_offtopic, as: :hidden
        = f.input :is_summary, as: :hidden

      - elsif f.object.kind_of? Message
        = f.input :kind, as: :hidden
        = f.input :from_id, as: :hidden
        = f.input :to_id, as: :hidden
      - else
        - raise ArgumentError, f.object

      = f.input :body,
        as: :text,
        input_html: {\
          class: "b-#{f.object.class.name.downcase} editor-area",
          placeholder: (browser.ie? ? '' : t('.comment')),
          tabindex: 0,
          'data-upload_url' => api_user_images_url(linked_type: Comment.name),
          'data-item_type' => item_type\
        }
    - else
      = text_area_tag field_name, text,
        class: 'comment_body editor-area',
        placeholder: (browser.ie? ? '' : t('.text')),
        tabindex: 0,
        'data-upload_url' => api_user_images_url(linked_type: nil),
        'data-item_type' => item_type
  .preview

footer
  a.about-bb_codes[
    href="#{bb_codes_pages_url}"
    target="_blank"
  ] = t '.bb_codes_guide'

  - if defined?(f)
    - if comment.persisted?
      = f.button :magic_submit
      .button.preview data-preview_url="#{preview_url}" = t '.preview'
      .unpreview = t '.back_to_editing'
      .cancel = t 'actions.cancel'

    - else
      = f.button :magic_submit
      .unpreview = t '.back_to_editing'
      .button.preview data-preview_url="#{preview_url}" = t '.preview'
      .hide = t '.hide'

  - else
    .button.preview data-preview_url="#{preview_url}" = t '.preview'
    .unpreview = t '.back_to_editing'
