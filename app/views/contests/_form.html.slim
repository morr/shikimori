= simple_form_for contest, html: { class: "b-form block edit contest #{contest.strategy_type}" } do |f|
  - if contest.errors.any?
    .b-errors
      .subheadline = i18n_i 'error', :other
      .block
        == contest.errors.full_messages.join('<br>')

  .subheadline = t '.common'
  .block
    = f.input :title
    = f.input :member_type,
        as: :select,
        collection: Contest.member_type.options,
        include_blank: false,
        disabled: contest.persisted?
    = f.input :strategy_type,
        as: :select,
        collection: Contest.strategy_type.options,
        include_blank: false,
        disabled: contest.started? || contest.finished?
    = f.input :user_vote_key,
        as: :select,
        collection: [:can_vote_1, :can_vote_2, :can_vote_3],
        include_blank: false,
        hint: t('.user_vote_key_hint')

  .cc-2
    .c-column
      .subheadline = t '.duration'
      = f.input :matches_per_round,
          disabled: contest.started? || contest.finished?,
          hint: (contest.swiss? ? t('.matches_per_round_swiss_hint') : ''),
          input_html: { min: 1 }
      = f.input :suggestions_per_user,
          disabled: contest.started? || contest.finished?,
          input_html: { min: 1 }
      = f.input :matches_interval,
          disabled: contest.started? || contest.finished?,
          input_html: { min: 1 }
      = f.input :match_duration,
          disabled: contest.started? || contest.finished?,
          input_html: { min: 1 }
      = f.input :started_on,
          disabled: contest.started? || contest.finished?,
          start_year: [contest.started_on.year, Date.today.year].min,
          end_year: [contest.started_on.year, Date.today.year + 1].max

      - if contest.rounds.any?
        span.action-misc = t '.polls_will_be_reshuffled'

    .c-column
      - if contest.persisted?
        .subheadline = t '.status'
        .block
          p.m5 = t("Contest.#{contest.state}")

        - if contest.object.can_propose? || contest.can_start? || contest.can_stop_propose?
          .subheadline = t '.actions'
          .contest_actions
            - if contest.object.can_propose?
              div: a.b-js-link[
                href="#{propose_contest_url contest}"
                data-method='post'
              ] = t '.accept_candidates'

            - if contest.can_stop_propose?
              div: a.b-js-link[
                href="#{cleanup_suggestions_contest_url contest}"
                data-method='post'
              ] = t '.cleanup_candidates'
              div: a.b-js-link[
                href="#{stop_propose_contest_url contest}"
                data-method='post'
              ] = t '.stop_accepting_candidates'

            - if contest.can_start?
              div: a.b-js-link[
                href="#{build_contest_url contest}"
                data-method='post'
              ]
                - if contest.rounds.empty?
                  = t '.generate_polls'
                - else
                  = t '.shuffle_polls'
              - if contest.can_start? & contest.rounds.any?
                div: a.b-js-link[
                  href="#{start_contest_url contest}"
                  data-method='post'
                  data-confirm=t('.sure_to_start_contest')
                ] = t '.start_contest'
              span.action-misc = t '.actions_reload_page'

              - if contest.links.count < Contest::MINIMUM_MEMBERS
                span.action-misc.warn
                  = t '.minimum_anime_needed_for_start', min_members: Contest::MINIMUM_MEMBERS
              - elsif contest.links.count > Contest::MAXIMUM_MEMBERS
                span.action-misc.warn
                  = t '.maximum_anime_needed_for_start', max_members: Contest::MAXIMUM_MEMBERS
              /- elsif Contest.all.any?(&:started?)
                span.action-misc.warn Для старта не должно быть других запущенных опросов

              span.action-misc.warn = t '.you_cannot_change_anything_after_start'

            /- if contest.can_finish?
              /a.action href="#{finish_contest_url(contest)}" data-confirm="Вы уверены?" Остановить
              /span.action-misc действие перезагрузит страницу без сохранения прочих изменений

      - if contest.rounds.any? && !contest.swiss?
        .subheadline = t 'tournament_bracket'
        .block_m.grid
          a href="#{grid_contest_url contest}" title=t('tournament_bracket') = "#{t 'goto'} →"

  - if contest.persisted?
    - if contest.created? || contest.proposing?
      .block
        - if contest.anime?
          input.member-suggest.subheadline-input.downgrade_landscape [
            type='text'
            placeholder=t('anime_title')
            data-variant_name='contest[member_ids][]'
            data-autocomplete="#{autocomplete_animes_url}"
          ]
        - else
          input.member-suggest.subheadline-input.downgrade_landscape [
            type='text'
            placeholder=t('character_name')
            data-variant_name='contest[member_ids][]'
            data-autocomplete="#{autocomplete_characters_url}"
          ]

        /input.member-suggest.suggest.subheadline-input.common [
          type='text'
          data-member_type="#{contest.member_type}"
          data-autocomplete="#{contest.anime? ? autocomplete_animes_url : autocomplete_characters_url}"
          ]
        .subheadline = contest.anime? ? i18n_i('Anime') : i18n_i('Character', :other)

        = hidden_field_tag 'contest[member_ids][]', ''
        .variants
          - contest.members.uniq(&:id).each do |member|
            .variant
              = check_box_tag 'contest[member_ids][]', member.id, checked: true
              - if contest.anime?
                a.bubbled href="#{anime_url member}"
                  = member.name
                  span.b-bracket-details
                    = member.score
              - else
                a.bubbled href="#{character_url member}" = member.name

            /.variant
              = hidden_field_tag 'members[]', member.id
              a.bubbled href="#{url_for member}"
                = member.name
              - if member.respond_to? :score
                span.b-bracket-details
                  = member.score
              - if contest.created? || contest.proposing?
                span.b-bracket-actions
                  span.item-delete удалить

        p
          = "#{t 'Total'}:&nbsp;".html_safe
          span.members_count = contest.members.count
          | &nbsp;
          span.members_count_label = i18n_i 'member', contest.members.count

    - if contest.suggestions.any?
      .suggestions
        = render 'private_suggestions', contest: contest

  .buttons
    a.cancel[
      href="#{@resource.persisted? ? contest_url(@resource) : contests_url}"
    ] = t 'actions.cancel'
    = f.button :magic_submit

- if contest.persisted? && contest.rounds.any?
  .clearfix
    - contest.rounds.each do |round|
      .block
        .subheadline
          = round.title
        = render 'contest_matches/match_days',
          contest: contest,
          matches: contest.grouped_matches(round)
