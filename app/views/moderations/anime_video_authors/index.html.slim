header.head
  h1 = og.headline
  = render 'application/breadcrumbs'

.subheadline.m10 Группы фансаба/фандаба, которые автоматически распознаёт сайт
.block
  - AnimeOnline::FixAnimeVideoAuthors::STUDIOS.sort.each do |studio|
    .b-tag = studio

.subheadline.m10 = t 'navigation'
ul.b-list.block
  li.m15
    a.b-link[
      href=(request.fullpath == current_url(is_verified: nil) ? moderations_anime_video_authors_url : current_url(is_verified: nil))
    ] Все авторы

  li
    a.b-js-link[
      class=(:active if params[:limit] == '5000')
      href=current_url(limit: (5000 if params[:limit] != '5000'))
    ] Limit 5000

  li
    a.b-js-link[
      class=(:active if params[:broken_videos] == 'false')
      href=current_url(broken_videos: ('false' if params[:broken_videos] != 'false'))
    ] Не показывать у кого все видео сломаны

  li
    a.b-js-link[
      class=(:active if params[:is_verified] == 'true')
      href=current_url(is_verified: ('true' if params[:is_verified] != 'true'))
    ] Только проверенные авторы
  li.m15
    a.b-js-link[
      class=(:active if params[:is_verified] == 'false')
      href=current_url(is_verified: ('false' if params[:is_verified] != 'false'))
    ] Только не проверенные авторы

  li
    a.b-link[
      href=none_moderations_anime_video_authors_url
    ] Видео без авторов

.b-search
  .field
    form
      - if params[:is_verified].present?
        input type="hidden" name="is_verified" value=params[:is_verified]
      - if params[:broken_videos].present?
        input type="hidden" name="broken_videos" value=params[:broken_videos]
      - if params[:anime_id].present?
        input type="hidden" name="anime_id" value=params[:anime_id]
      - if params[:limit].present?
        input type="hidden" name="limit" value=params[:limit]

      input[
        type="text"
        placeholder="Имя автора"
        value="#{params[:search]}"
        name="search"
      ]
      - if params[:search].present?
        a.clear[
          href=current_url(search: nil)
        ]

  .block.searchable-collection
    form
      - if params[:is_verified].present?
        input type="hidden" name="is_verified" value=params[:is_verified]
      - if params[:broken_videos].present?
        input type="hidden" name="broken_videos" value=params[:broken_videos]
      - if params[:search].present?
        input type="hidden" name="search" value=params[:search]
      - if params[:limit].present?
        input type="hidden" name="limit" value=params[:limit]

      input#anime_id name="anime_id" type="hidden" value=params[:anime_id]
      input.anime-suggest.subheadline-input.downgrade_landscape[
        data-autocomplete=autocomplete_animes_url
        placeholder=t('anime_title')
        type="text"
      ]

    .subheadline.m10
      - if @anime
        ' Авторы аниме
        a.b-link.bubbled href=anime_url(@anime)
          = localization_span @anime
        .misc-links
          a href=current_url(anime_id: nil) без аниме
      - else
        | Все авторы

    .block
      - if @collection.any?
        = render partial: 'moderations/anime_video_authors/anime_video_author',
          collection: @collection,
          locals: { anime: @anime }

      - else
        .b-nothing_here Нет авторов

      - if @collection.size == @limit
        = render 'blocks/postloader',
          filter: 'b-log_entry',
          next_url: current_url(page: @page + 1)
